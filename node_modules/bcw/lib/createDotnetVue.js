let fs = require("fs")
let { execSync } = require("child_process")
let { colors, startSpinner, stopSpinner } = require('../console-utils')
const { generateWorkspace } = require("./generateWorkspace")
const { npm_i } = require("./npm_i")

function createDotnetAuth(CURR_DIR, projectName, asServer = false) {
  return new Promise((resolve, reject) => {
    try {
      let directory = asServer ? 'server' : projectName
      try {
        execSync(`npx create-project ${directory} --name="${projectName}" codeworks-templates/dotnet-webapi`)
      } catch (error) {
        if (!fs.existsSync(`${CURR_DIR}/${directory}`)) {
          throw error
        }
        console.error('[!] LIES... maybe', error.message)
      }
      process.chdir(`${CURR_DIR}/${directory}`)
      fs.renameSync(`{{name}}.csproj`, `${projectName}.csproj`)
      installServerDependencies()
      resolve(`[#] Open Project Workspace\n[#] cd into ${directory}`)
    } catch (e) {
      reject(e)
    }
  })
}

async function createDotnetFullstack(CURR_DIR, projectName, projectChoice = '') {
  return new Promise(async (resolve, reject) => {
    try {

      let framework = ''

      switch (projectChoice) {
        case 'dotnet-vue':
          framework = 'vue'
          break
        case 'dotnet-react':
          framework = 'react'
          break
        case 'dotnet-angular':
          framework = 'angular'
          break
      }


      let projPath = `${CURR_DIR}/${projectName}`
      fs.mkdirSync(projPath)
      process.chdir(projPath)

      await createDotnetAuth(projPath, projectName, true)
      process.chdir('../')
      execSync(`npx create-project client --name="${projectName}" codeworks-templates/${framework}-starter`)

      fs.writeFileSync(`${projPath}/${projectName}.code-workspace`, generateWorkspace(projectName, true), "utf8")

      installClientDependencies(projectName)
      resolve(`[#] Open Project Workspace\n[#] cd into ${projectName}\n[#] type 'code ${projectName}.code-workspace`)
    } catch (e) {
      console.groupEnd()
      reject(e)
    }
  })
}

function installClientDependencies(projectName) {
  process.chdir('client')
  npm_i()
  process.chdir(`../`)
}

function installServerDependencies() {
  console.groupCollapsed(colors.FgMagenta, "  [~] Installing Server Dependencies", colors.Reset)
  startSpinner()
  execSync('dotnet restore')
  stopSpinner()
  console.groupEnd()
}

exports.createDotnetFullstack = createDotnetFullstack
exports.createDotnetAuth = createDotnetAuth
